#Использовать "../../src"
#Использовать asserts
// Реализация шагов BDD-фич/сценариев c помощью фреймворка https://github.com/artbear/1bdd

Перем БДД; //контекст фреймворка 1bdd

// Метод выдает список шагов, реализованных в данном файле-шагов
Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеШаги = Новый Массив;

	ВсеШаги.Добавить("ЯСоздаюГитхабрепозиторийДляРепозитрияВКонтексте");
	ВсеШаги.Добавить("ЯПолучаюСписокРелизовИСохраняюВКонтекст");
	ВсеШаги.Добавить("КоличествоБольшеДляЗначенияИз");
	ВсеШаги.Добавить("ЯПолучаюПоследнийВыпускИСохраняюВКонтекст");
	ВсеШаги.Добавить("ВыпускИзКонтекстаИмеетМетку");
	ВсеШаги.Добавить("ЯПолучаюВыпускСМеткойИСохраняюВКонтекст");

	Возврат ВсеШаги;
КонецФункции

// Реализация шагов

// Процедура выполняется перед запуском каждого сценария
Процедура ПередЗапускомСценария(Знач Узел) Экспорт
	
КонецПроцедуры

// Процедура выполняется после завершения каждого сценария
Процедура ПослеЗапускаСценария(Знач Узел) Экспорт
	
КонецПроцедуры


//Я создаю ГитХабРепозиторий для репозитрия "khorevaa/cli" в контексте
Процедура ЯСоздаюГитхабрепозиторийДляРепозитрияВКонтексте(Знач ИмяРепозитория) Экспорт
	
	МассивСтрока = СтрРазделить(ИмяРепозитория, "/");

	ГитХабРепозиторий = Новый ГитХабРепозиторий(МассивСтрока[0], МассивСтрока[1]);

	БДД.СохранитьВКонтекст("ГитХабРепозиторий", ГитХабРепозиторий);
	
КонецПроцедуры

//Я получаю список релизов и сохраняю в контекст "СписокРелизов"
Процедура ЯПолучаюСписокРелизовИСохраняюВКонтекст(Знач ИмяПеременной) Экспорт
		
	ГитХабРепозиторий = БДД.ПолучитьИзКонтекста("ГитХабРепозиторий");
	СписокВыпусков = ГитХабРепозиторий.ПолучитьСписокВыпусков();

	БДД.СохранитьВКонтекст(ИмяПеременной, СписокВыпусков);

КонецПроцедуры

//Количество больше "0" для значения из "СписокРелизов"
Процедура КоличествоБольшеДляЗначенияИз(Знач Количество, Знач ИмяПеременной) Экспорт

	СписокВыпусков = БДД.ПолучитьИзКонтекста(ИмяПеременной);

	Ожидаем.Что(СписокВыпусков.Количество(), "Количество релизов должно быть").Больше(Число(Количество));

КонецПроцедуры

//Я получаю последний выпуск и сохраняю в контекст "ПоследнийВыпуск"
Процедура ЯПолучаюПоследнийВыпускИСохраняюВКонтекст(Знач ИмяПеременной) Экспорт
	ГитХабРепозиторий = БДД.ПолучитьИзКонтекста("ГитХабРепозиторий");
	ПоследнийВыпуск = ГитХабРепозиторий.ПолучитьПоследнийВыпуск();

	БДД.СохранитьВКонтекст(ИмяПеременной, ПоследнийВыпуск);
КонецПроцедуры

//Последний выпуск получен из контекста "ПосленийВыпуск"
Процедура ПоследнийВыпускПолученИзКонтекста(Знач ИмяПеременной) Экспорт
	ПоследнийВыпуск = БДД.ПолучитьИзКонтекста(ИмяПеременной);
	Ожидаем.Что(ПоследнийВыпуск.Метка, "Метка выпуска должна быть заполнена").Заполнено();
КонецПроцедуры

//Выпуск из контекста "ПоследнийВыпуск" имеет метку
Процедура ВыпускИзКонтекстаИмеетМетку(Знач ИмяПеременной) Экспорт
	Выпуск = БДД.ПолучитьИзКонтекста(ИмяПеременной);
	Ожидаем.Что(Выпуск.Метка, "Метка выпуска должна быть заполнена").Заполнено();
КонецПроцедуры

//Я получаю выпуск с меткой "0.9.8" и сохраняю в контекст "Выпуск"
Процедура ЯПолучаюВыпускСМеткойИСохраняюВКонтекст(Знач ИмяМетки, Знач ИмяПеременной) Экспорт
	ГитХабРепозиторий = БДД.ПолучитьИзКонтекста("ГитХабРепозиторий");
	ПоследнийВыпуск = ГитХабРепозиторий.ПолучитьВыпускПоМетке(ИмяМетки);

	БДД.СохранитьВКонтекст(ИмяПеременной, ПоследнийВыпуск);
КонецПроцедуры
// Я создаю новый выпуск с параметрами
Процедура ЯСоздаюНовыйВыпускСПараметрамиИСохраняюВКонтекст(Метка, Наименование, Описание, ВеткаИлиКоммит, Черновик, ПредварительныйВыпуск, ИмяПеременной ) Экспорт
	
	ГитХабРепозиторий = БДД.ПолучитьИзКонтекста("ГитХабРепозиторий");
	ПоследнийВыпуск = ГитХабРепозиторий.СоздатьВыпуск(Метка, Наименование, Описание, ВеткаИлиКоммит, Черновик, ПредварительныйВыпуск);

	БДД.СохранитьВКонтекст(ИмяПеременной, ПоследнийВыпуск);

КонецПроцедуры





